<data>

<!--UPDATE WITH YOUR USERNAME -->
    <USERNAME>am2366</USERNAME>

<!--START OF EXAMPLE -->
    <question id="0">
        <answer>1094</answer>
        <sql>
            SELECT COUNT(*) FROM trajectory.tracking;
        </sql>
    </question>
<!--END OF EXAMPLE -->

<!--START OF YOUR ANSWERS and SQL STATEMENTS-->

    <question id="1">
        <answer>"The Lodger (1898)"</answer>
        <sql>
            SELECT title
            FROM imdb.movies  
            ORDER BY year ASC LIMIT 1;
        </sql>
    </question>

    <question id="2">
        <answer>2</answer>
        <sql>
       SELECT COUNT(*)
        FROM (
            SELECT m.movieId, COUNT(m2d.directorId)  
            FROM imdb.movies m
            JOIN imdb.movies2directors m2d ON m.movieId = m2d.movieId
            GROUP BY m.movieId  
            HAVING COUNT(m2d.directorId) > 7
        ) 

        </sql>
    </question> 

    <question id="3">
        <answer>1940</answer>
        <sql>
            SELECT m.year, COUNT(m2d.directorId) AS director_count  
            FROM imdb.movies m
            JOIN imdb.movies2directors m2d ON m.movieId = m2d.movieId
            GROUP BY m.movieId, m.year  
            ORDER BY director_count DESC
            LIMIT 1;

        </sql>
    </question>

    <question id="4">
        <answer>2500324</answer>
        <sql>
            SELECT m2a2.actorid, COUNT(*) AS coactor_count
                FROM imdb.movies2actors m2a1
                JOIN imdb.movies2actors m2a2 ON m2a1.movieid = m2a2.movieid
                WHERE m2a1.actorid = (SELECT actorid 
                                        FROM imdb.actors 
                                        WHERE name = 'Hanks, Tom')
                AND m2a2.actorid != m2a1.actorid
            GROUP BY m2a2.actorid
            ORDER BY coactor_count DESC
            LIMIT 1;
        </sql>
    </question>

    <question id="5">
        <answer>135</answer>
        <sql>
        <!-- not sure -->
            SELECT COUNT(*)
            FROM (
                    SELECT LEAST(m1.actorid, m2.actorid) AS actor1, 
                    GREATEST(m1.actorid, m2.actorid) AS actor2, 
                    COUNT(*) 
                FROM imdb.movies2actors m1
                JOIN imdb.movies2actors m2 
                ON m1.movieid = m2.movieid
                WHERE m1.actorid != m2.actorid
                GROUP BY actor1, actor2
                HAVING COUNT(*) > 10
            )
        </sql>
    </question>

    <question id="6">
        <answer>1930</answer>
        <sql>
            SELECT (m.year / 10) * 10 AS decade, 
                AVG(CAST(r.rank AS FLOAT)) AS avg_rating
            FROM imdb.movies m
            JOIN imdb.ratings r ON m.movieid = r.movieid
            GROUP BY decade
            ORDER BY avg_rating DESC
            LIMIT 1;
        </sql>
    </question>

    <question id="7">
        <answer>18</answer>
        <sql>

       SELECT count(*) as some_name
            FROM(
            SELECT m.movieid
            FROM imdb.movies m
            LEFT JOIN imdb.movies2directors m2d ON m.movieid = m2d.movieid
            WHERE m2d.directorid IS NULL
            )

        </sql>
    </question>

    <question id="8">
    <!-- how many movies have an actor/actress 
    written and directed but not starred in? 
    (i.e. the person that wrote and directed
     the movie is an actor/actress but they didn't star in their own movie). -->
        <answer>35</answer>
        <sql>
       SELECT COUNT(DISTINCT m2w.writerid) AS director_writer_count
        FROM imdb.movies2writers m2w

        INNER JOIN imdb.movies2directors m2d ON m2w.writerid = m2d.directorid 
        LEFT JOIN imdb.movies2actors m2a ON m2w.movieid = m2a.movieid AND m2w.writerid = m2a.actorid       

        WHERE m2a.actorid IS NULL; 
        </sql>
    </question>

    <question id="9">
    <!-- Identify the Director (by director ID)
     with the most movies over 160 minutes long. 
     wha is the time-->
        <answer></answer>
        <sql>

        </sql>
    </question>

    <question id="10">
    <!-- Find the actor id for the person who starred in over 43 movies before 2015, 
    including at least 1 directed by Steven Spielberg -->
        <answer></answer>
        <sql>
            
        </sql>
    </question>

    <question id="11">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="12">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="13">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="14">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="15">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="16">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="18">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="19">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="20">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="21">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="22">
        <answer></answer>
        <sql>
       
        </sql>
    </question>


    <question id="23">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="24">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="25">
        <answer></answer>
        <sql>
       
        </sql>
    </question>


<!--END OF ANSWERS -->

</data>
