<data>

<!--UPDATE WITH YOUR USERNAME -->
    <USERNAME>am2366</USERNAME>

<!--START OF EXAMPLE -->
    <question id="0">
        <answer>1094</answer>
        <sql>
            SELECT COUNT(*) FROM trajectory.tracking;
        </sql>
    </question>
<!--END OF EXAMPLE -->

<!--START OF YOUR ANSWERS and SQL STATEMENTS-->

    <question id="1">
        <answer>The Lodger (1898)</answer>
        <sql>
            SELECT title
            FROM imdb.movies  
            ORDER BY year ASC LIMIT 1;
        </sql>
    </question>

    <question id="2">
        <answer>2</answer>
        <sql>
    SELECT COUNT(*)
        FROM (
            SELECT m.movieId, COUNT(distinct(m2d.directorId))  
            FROM imdb.movies m
            JOIN imdb.movies2directors m2d ON m.movieId = m2d.movieId
            GROUP BY m.movieId  
            HAVING COUNT(distinct(m2d.directorId))  > 7
        ) 

        </sql>
    </question> 

    <question id="3">
        <answer>1940</answer>
        <sql>
            SELECT m.year, COUNT(m2d.directorId) AS director_count  
            FROM imdb.movies m
            JOIN imdb.movies2directors m2d ON m.movieId = m2d.movieId
            GROUP BY m.movieId, m.year  
            ORDER BY director_count DESC
            LIMIT 1;

        </sql>
    </question>

    <question id="4">
        <answer>2500324</answer>
        <sql>
            SELECT m2a2.actorid, COUNT(*) AS coactor_count
                FROM imdb.movies2actors m2a1
                JOIN imdb.movies2actors m2a2 ON m2a1.movieid = m2a2.movieid
                WHERE m2a1.actorid = (SELECT actorid 
                                        FROM imdb.actors 
                                        WHERE name = 'Hanks, Tom')
                AND m2a2.actorid != m2a1.actorid
            GROUP BY m2a2.actorid
            ORDER BY coactor_count DESC
            LIMIT 1;
        </sql>
    </question>

    <question id="5">
        <answer>3</answer>
        <sql>

        SELECT COUNT(*)
            FROM (
            SELECT COUNT(*) 
                FROM imdb.movies2actors m1
                JOIN imdb.movies2actors m2 ON m1.movieid = m2.movieid
                AND m1.actorid != m2.actorid
                AND LEAST(m1.actorid, m2.actorid) = m1.actorid
                        
                JOIN imdb.actors a1 ON m1.actorid = a1.actorid
                JOIN imdb.actors a2 ON m2.actorid = a2.actorid
                GROUP BY a1.name, a2.name
                HAVING COUNT(*) > 10)
                
        </sql>
    </question>

    <question id="6">
        <answer>1930</answer>
        <sql>
            SELECT (m.year / 10) * 10 AS decade, 
                AVG(CAST(r.rank AS FLOAT)) AS avg_rating
            FROM imdb.movies m
            JOIN imdb.ratings r ON m.movieid = r.movieid
            GROUP BY decade
            ORDER BY avg_rating DESC
            LIMIT 1;
        </sql>
    </question>

    <question id="7">
        <answer>14</answer>
        <sql>

        SELECT COUNT(DISTINCT m2d.movieid) as movies_no_genre
            FROM imdb.movies m	
            JOIN imdb.movies2directors m2d ON m.movieid = m2d.movieid
            WHERE m2d.genre IS NULL
	

        </sql>
    </question>

    <question id="8">
    <!-- how many movies have an actor/actress 
    written and directed but not starred in? 
    (i.e. the person that wrote and directed
     the movie is an actor/actress but they didn't star in their own movie). -->
        <answer>35</answer>
        <sql>
       SELECT COUNT(DISTINCT m2w.writerid) AS director_writer_count
        FROM imdb.movies2writers m2w
        JOIN imdb.movies2directors m2d ON m2w.writerid = m2d.directorid 
        LEFT JOIN imdb.movies2actors m2a ON m2w.movieid = m2a.movieid AND m2w.writerid = m2a.actorid       

        WHERE m2a.actorid IS NULL; 
        </sql>
    </question>

    <question id="9">
    <!-- Identify the Director (by director ID)
     with the most movies over 160 minutes long. 
     wha is the time-->
        <answer>54501</answer>
        <sql>
            SELECT directorid, COUNT(DISTINCT run.movieid)  
            FROM imdb.runningtimes run
            JOIN imdb.movies2directors m2d ON m2d.movieid = run.movieid 
            WHERE run.time1>160
            GROUP BY m2d.directorid
            ORDER BY COUNT(DISTINCT run.movieid) DESC
            LIMIT 1;

        </sql>
    </question>

    <question id="10">
    <!-- Find the actor id for the person who starred in over 43 movies before 2015, 
    including at least 1 directed by Steven Spielberg 
    "Welker, Frank"? - person w over 43 movies in total
    -->
        <answer>1694741</answer>
        <sql>

            SELECT a.actorid, a.name, COUNT(Distinct (m2a.movieid)) AS movie_count
            FROM imdb.movies2actors m2a
            JOIN imdb.movies m ON m2a.movieid = m.movieid                 
            JOIN imdb.actors a ON m2a.actorid = a.actorid                  
            WHERE m.year < 2015                                            
            AND m2a.actorid IN (                                         
                SELECT DISTINCT m2a.actorid
                FROM imdb.movies2actors m2a
                JOIN imdb.movies2directors m2d ON m2a.movieid = m2d.movieid
                JOIN imdb.directors d ON m2d.directorid = d.directorid
                WHERE d.name = 'Spielberg, Steven'
            )
            GROUP BY a.actorid, a.name
            HAVING COUNT(Distinct (m2a.movieid))> 43;

        </sql>
    </question>

    <question id="11">
        <answer>74</answer>   
        <sql>
       SELECT COUNT(*)
        FROM scenicornot.locations loc
        WHERE ST_DWithin(loc.geom_bng, ST_SetSRID(ST_MakePoint(530000, 180000), 27700), 5000);
        </sql>
    </question>

    <question id="12">
    <!-- Based on using the hexgrid (10km cells) layer provided, 
    which region (cell_id) with
    at least 3 sample locations has the highest average scenic scores? -->
        <answer>616</answer>
        <sql>
            SELECT hex10.cell_id, COUNT(*)
            FROM scenicornot.hexgrid10km hex10
            JOIN scenicornot.locations loca ON ST_Contains(hex10.geom, loca.geom_bng)
            GROUP BY hex10.cell_id
            HAVING COUNT(*) > 2
            ORDER BY AVG(loca.average) DESC
            LIMIT 1;

        </sql>
    </question>

    <question id="13">
    <!-- What is the largest total number of 
    votes cast within a single hex cell? -->
        <answer>2222</answer>
        <sql>

            SELECT hex10.cell_id, COUNT(loc.fid) AS num_votes
            FROM scenicornot.hexgrid10km hex10
            JOIN scenicornot.locations loc ON ST_Contains(hex10.geom, loc.geom_bng)
            CROSS JOIN LATERAL UNNEST(STRING_TO_ARRAY(loc.votes, ',')) AS num
            GROUP BY hex10.cell_id
            ORDER BY num_votes DESC
            limit 1;

        </sql>
    </question>
    <question id="14">
        <answer></answer>
        <sql>
       <!-- 1758/9 cor -->
        WITH hex_average AS (
            SELECT hex10.cell_id, AVG(loc.average) AS avg_scenic_score
            FROM scenicornot.hexgrid10km hex10
            JOIN scenicornot.locations loc ON ST_Contains(hex10.geom, loc.geom_bng)
            GROUP BY hex10.cell_id
        ),

        neighbours_average AS (
            SELECT 
                h1.cell_id AS cell_id, 
                h2.cell_id AS neighbor_cell_id
            FROM scenicornot.hexgrid10km h1
            JOIN scenicornot.hexgrid10km h2 
                ON ST_Touches(h1.geom, h2.geom)
        ),

        hex_diff AS (
            SELECT 
                n.cell_id, 
                n.neighbor_cell_id, 
                ABS(h1.avg_scenic_score - h2.avg_scenic_score) AS score_difference
            FROM neighbours_average n
            JOIN hex_average h1 ON n.cell_id = h1.cell_id
            JOIN hex_average h2 ON n.neighbor_cell_id = h2.cell_id
        )

        SELECT cell_id, neighbor_cell_id, score_difference
        FROM hex_diff
        ORDER BY score_difference DESC
        LIMIT 1;


        </sql>
    </question>

    <question id="15">
        <answer></answer>
        <sql>

        WITH quake_periods AS (
            SELECT 
                DATE_TRUNC('day', '2010-01-01 00:00:00'::timestamp) + 
                INTERVAL '48 hours' * FLOOR(EXTRACT(EPOCH FROM (q.datetime - '2010-01-01 00:00:00'::timestamp)) / (48 * 3600)) 
                AS period_start,
                COUNT(*) AS quake_count
            FROM quakes.scotquakes q
            GROUP BY period_start
        )

        SELECT period_start AS start_time, (period_start + INTERVAL '48 hours') AS end_time, quake_count
        FROM quake_periods
        ORDER BY quake_count DESC;

        </sql>
    </question>

    <question id="16">
        <answer>0</answer>
        <sql>

            SELECT COUNT(DISTINCT hex10.cell_id)
            FROM scenicornot.hexgrid10km hex10 
            JOIN quakes.scotquakes q 
            ON ST_DWithin(ST_Transform(hex10.geom, 27700),ST_Transform(q.geom, 27700),100);
        
        </sql>
    </question>
        <!-- 
        ans:33
        WITH clusters AS (

            SELECT ST_ClusterDBSCAN(q.geom, 15000, 5) OVER () AS cluster_id
            FROM quakes.scotquakes q
        ) 

        SELECT COUNT(DISTINCT(cluster_id))
        FROM clusters
        WHERE cluster_id IS NOT NULL; 
        
        -->





    <question id="18">
        <answer></answer>
        <!-- What was the average walking speed for userid = ‘p3’ ? -->
        <sql>

            SELECT AVG(spd) 
            FROM trajectory.tracking tr
            WHERE tr.userid = 'p3'

                
                
        </sql>
    </question>

    <question id="19">
        <answer>"p1"</answer>
        <sql>


       SELECT COUNT(tr.geom) as trac, tr.userid
        FROM Trajectory.tracking tr
        GROUP BY tr.userid
        ORDER BY trac DESC
        limit 1;

        </sql>
    </question>

    <question id="20">
        <answer></answer>
        <sql>

        </sql>
    </question>

    <question id="21">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="22">
        <answer></answer>
        <sql>
       
        </sql>
    </question>


    <question id="23">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="24">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="25">
        <answer></answer>
        <sql>
       
        </sql>
    </question>


<!--END OF ANSWERS -->

</data>
